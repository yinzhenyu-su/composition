"use strict";(self.webpackChunkzcomposition=self.webpackChunkzcomposition||[]).push([[304],{9007:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-4deb2ad7",path:"/composition/Effect/useEffect/",title:"useEffect 无副作用的执行某个函数",lang:"en-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"代码演示",slug:"代码演示",children:[{level:3,title:"示例代码",slug:"示例代码",children:[]}]},{level:2,title:"Interface",slug:"interface",children:[]},{level:2,title:"Option",slug:"option",children:[]}],filePathRelative:"composition/Effect/useEffect/README.md",git:{updatedTime:1638439509e3,contributors:[{name:"curryPaste",email:"2771885247@qq.com",commits:1},{name:"susheng",email:"2771885247@qq.com",commits:1}]}}},8238:(n,s,a)=>{a.r(s),a.d(s,{default:()=>_});var t=a(6252),e=a(3577),p=a(2262),o=a(6102),c=a(2060);const l=(0,t._)("h1",{id:"useeffect-无副作用的执行某个函数",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#useeffect-无副作用的执行某个函数","aria-hidden":"true"},"#"),(0,t.Uk)(" useEffect 无副作用的执行某个函数")],-1),i=(0,t.Uk)("参考了React的"),u={href:"https://zh-hans.reactjs.org/docs/hooks-effect.html",target:"_blank",rel:"noopener noreferrer"},r=(0,t.Uk)("useEffect"),d=(0,t.Uk)("方法"),k=(0,t.uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>原版React的useEffect有两个关键点</p><ul><li>可以选择性的执行一个无副作用的函数 <ul><li>如果不 <code>return</code> 则表示不需要清除副作用</li></ul></li><li>调用函数的机制 <ul><li>初始调用</li><li>当依赖项的值发生了变化时，也去触发对应的函数</li></ul></li></ul></div><h2 id="代码演示" tabindex="-1"><a class="header-anchor" href="#代码演示" aria-hidden="true">#</a> 代码演示</h2>',2),m=(0,t._)("div",null,"普通调用⬇️",-1),b=(0,t._)("p",null,null,-1),f=(0,t._)("div",null,"需要监听变量⬇️（打开控制台查看函数执行）",-1),g=(0,t.Uk)("ref:"),h=["value"],v=(0,t._)("p",null,null,-1),w=(0,t.Uk)("reactive:"),y=["value"],E=(0,t.uE)('<h3 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码" aria-hidden="true">#</a> 示例代码</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 需要处理副效应</span>\n<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">const</span> i <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        <span class="token comment">// console.log(&#39;this is interval, when Unmounted I`m destroy&#39;);</span>\n        data<span class="token punctuation">.</span>need <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">clearInterval</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 不需要处理副效应</span>\n<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">const</span> ii <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;I`m interavl, but always&#39;</span><span class="token punctuation">)</span>\n        data<span class="token punctuation">.</span>dont <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 需要监听变量并重新执行函数</span>\n<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;需要监听变量并重新执行函数&#39;</span><span class="token punctuation">,</span> refData<span class="token punctuation">.</span>value<span class="token punctuation">,</span> reactiveData<span class="token punctuation">.</span>a<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>refData<span class="token punctuation">,</span> reactiveData<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="interface" tabindex="-1"><a class="header-anchor" href="#interface" aria-hidden="true">#</a> Interface</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">UseEffectVoid</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">// 不需要处理副效应</span>\n<span class="token keyword">type</span> <span class="token class-name">UseEffectFunVoid</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">// 需要处理副效应</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="option" tabindex="-1"><a class="header-anchor" href="#option" aria-hidden="true">#</a> Option</h2><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>method</td><td>需要执行的函数(如果需要清除副效应，则在要执行的函数中return一个函数，并在函数中清除副效应)</td><td>UseEffectVoid / UseEffectFunVoid</td><td>-</td></tr><tr><td>needWatch</td><td>需要监听变化的变量数组，发生变化时出发method函数</td><td>ref或reactive包裹变量的Array</td><td>-</td></tr></tbody></table>',6),_=(0,t.aZ)({setup(n){const s=(0,p.qj)({need:1,dont:1}),a=(0,p.iH)(1),_=(0,p.qj)({a:1});return c.isClient&&((0,o.d4)((()=>{const n=setInterval((()=>{console.log("this is interval, when Unmounted I`m destroy"),s.need+=1}),2e3);return()=>{clearInterval(n)}})),(0,o.d4)((()=>{setInterval((()=>{console.log("I`m interavl, but always"),s.dont+=1}),2e3)})),(0,o.d4)((()=>{console.log("需要监听变量并重新执行函数",a.value,_.a)}),[a,_])),(n,o)=>{const c=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[l,(0,t._)("p",null,[i,(0,t._)("a",u,[r,(0,t.Wm)(c)]),d]),k,(0,t._)("div",null,[(0,t._)("div",null,[m,(0,t._)("div",null,"show: "+(0,e.zw)((0,p.SU)(s).need),1),(0,t._)("div",null,"show: "+(0,e.zw)((0,p.SU)(s).dont),1),b,f,(0,t._)("div",null,[(0,t._)("span",null,[g,(0,t._)("input",{type:"number",value:a.value,onChange:o[0]||(o[0]=n=>{a.value=n.target.value})},null,40,h)]),v,(0,t._)("span",null,[w,(0,t._)("input",{type:"number",value:(0,p.SU)(_).a,onChange:o[1]||(o[1]=n=>{(0,p.SU)(_).a=n.target.value})},null,40,y)])])])]),E],64)}}})},6102:(n,s,a)=>{a.d(s,{d4:()=>o,v1:()=>r}),a(9669),a(3279);var t=a(2060);a(577),a(3162),t.isClient&&window,t.isClient&&window.document,t.isClient&&window.navigator,t.isClient&&window.location,a(3493);var e=a(6252),p=a(2262);const o=(n,s)=>{const a=n();s&&s.length>0&&(0,e.YP)([...(0,p.BK)(s)],(()=>{n()}),{deep:!0}),void 0!==a&&(0,e.Ah)(a)};var c=a(9963),l=a(9391),i=a(6486);const u=(0,c.ri)({});function r(){let n;u.config.globalProperties.$emitter||(u.config.globalProperties.$emitter=(0,l.Z)()),n=u.config.globalProperties.$emitter;const s="padding:4px;border-radius:2x 0 0 2px;background:#00ADB5;color:#EEEEEE;",a="padding:4px;border-radius:0 2px 2px 0;background:#393E46;color:white;",t={instance:(0,e.FN)(),uid:()=>t.instance?t.instance.uid:void 0,componentName:()=>t.instance?t.instance.proxy.$options.name:t.uid()};return n.on("*",((e,p)=>{const o=n.all.get(e);r.$config.debug&&o&&o.length&&(console.log(p),console.log(`%c${t.componentName()||t.uid()}📥: %c${String(e)}`,s,a))})),n.emit=new Proxy(n.emit,{apply:(n,e,p)=>(r.$config.debug&&console.log(`%c${t.componentName()||t.uid()}📤: %c${String(p[0])}`,s,a),n.apply(e,p))}),n}r.$config={debug:!1},r.config=(0,i.once)((n=>{r.$config=n,n&&n.debug&&console.warn("useEventBus: debug mode is open."),Object.defineProperties(r,{$config:{...Object.getOwnPropertyDescriptors(r.config),writable:!1}})}))},2060:(n,s,a)=>{a.d(s,{isClient:()=>t});const t="undefined"!=typeof window,{toString:e}=Object.prototype}}]);