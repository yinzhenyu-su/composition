"use strict";(self.webpackChunkzcomposition=self.webpackChunkzcomposition||[]).push([[270],{3712:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-7354de26",path:"/composition/Effect/useModel/",title:"useVModel",lang:"en-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"基础使用",slug:"基础使用",children:[{level:3,title:"Type",slug:"type",children:[]}]}],filePathRelative:"composition/Effect/useModel/README.md",git:{updatedTime:1634536186e3,contributors:[{name:"Duex_",email:"duex0702@gmail.com",commits:2}]}}},9427:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="usevmodel" tabindex="-1"><a class="header-anchor" href="#usevmodel" aria-hidden="true">#</a> useVModel</h1><p>动态绑定 props emit</p><h2 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用" aria-hidden="true">#</a> 基础使用</h2><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>ts<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useVmodel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@lib&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  example<span class="token operator">:</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> String<span class="token punctuation">,</span>\n    <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Choice Img&quot;</span><span class="token punctuation">,</span>\n    required<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> emits <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;exampleEmit&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> exampleOptions <span class="token operator">=</span> <span class="token punctuation">{</span>\n  eventName<span class="token operator">:</span> <span class="token string">&#39;exampleEmit&#39;</span><span class="token punctuation">,</span>\n  passive<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  deep<span class="token operator">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> bindData <span class="token operator">=</span> <span class="token function">useVmodel</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span><span class="token string">&#39;example&#39;</span><span class="token punctuation">,</span>emit<span class="token punctuation">,</span>exampleOptions<span class="token punctuation">)</span>\n\nbindData<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span> <span class="token comment">// emit -&gt; emit(&#39;exampleEmit&#39;, &#39;test)</span>\n\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> Type</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>\n<span class="token keyword">type</span> <span class="token class-name">options</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  eventName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token comment">// 事件名称</span>\n  passive<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  <span class="token comment">// 监听方式</span>\n  deep<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>    <span class="token comment">// 深度监听</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useVModel</span><span class="token generic class-name"><span class="token operator">&lt;</span>\n  <span class="token constant">O</span> <span class="token keyword">extends</span> object<span class="token punctuation">,</span>\n  <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">P</span><span class="token punctuation">,</span>\n  Name <span class="token keyword">extends</span> <span class="token builtin">string</span>\n<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  props<span class="token operator">:</span> <span class="token constant">O</span><span class="token punctuation">,</span>\n  key<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span>\n  emit<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> Name<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>\n  options<span class="token operator">?</span><span class="token operator">:</span> options\n<span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span>UnwrapRef<span class="token operator">&lt;</span><span class="token constant">O</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span> <span class="token operator">|</span> WritableComputedRef<span class="token operator">&lt;</span><span class="token constant">O</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',6),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);