"use strict";(self.webpackChunkzcomposition=self.webpackChunkzcomposition||[]).push([[871],{8854:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-947d6d14",path:"/composition/Async/useRequest/",title:"useRequest",lang:"en-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"代码演示",slug:"代码演示",children:[{level:3,title:"基础使用",slug:"基础使用",children:[]}]},{level:2,title:"Request OPTION",slug:"request-option",children:[{level:3,title:"Request Api",slug:"request-api",children:[]}]},{level:2,title:"API",slug:"api",children:[{level:3,title:"参数",slug:"参数",children:[]}]}],filePathRelative:"composition/Async/useRequest/README.md",git:{updatedTime:1632830925e3,contributors:[{name:"curryPaste",email:"2771885247@qq.com",commits:1}]}}},5951:(n,s,a)=>{a.r(s),a.d(s,{default:()=>h});var t=a(6252),e=a(2262),p=a(3577),o=a(1790);const c=(0,t.uE)('<h1 id="userequest" tabindex="-1"><a class="header-anchor" href="#userequest" aria-hidden="true">#</a> useRequest</h1><p>axios 的封装 compositionApi</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>向服务器请求数据时使用。</p></div><h2 id="代码演示" tabindex="-1"><a class="header-anchor" href="#代码演示" aria-hidden="true">#</a> 代码演示</h2><h3 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用" aria-hidden="true">#</a> 基础使用</h3>',5),l=(0,t._)("br",null,null,-1),u={key:0},i={key:1},r={key:2},d=(0,t._)("br",null,null,-1),k=(0,t._)("div",null,"请求数据成功",-1),b=(0,t.uE)('<h2 id="request-option" tabindex="-1"><a class="header-anchor" href="#request-option" aria-hidden="true">#</a> Request OPTION</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>因为 useRequest 是一个全局单例, 所以你可以在任意一个地方自定义配置:</p></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useRequest<span class="token punctuation">,</span> Request <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@lib&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 设置baseUrl</span>\nRequest<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span><span class="token punctuation">{</span> baseURL<span class="token operator">:</span> <span class="token string">&quot;https://v1.hitokoto.cn/&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 设置请求拦截器</span>\nRequest<span class="token punctuation">.</span><span class="token function">setRequest</span><span class="token punctuation">(</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;请求前处理...&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> config<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//  添加响应拦截器</span>\nRequest<span class="token punctuation">.</span><span class="token function">setResponse</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 2xx 范围内的状态码都会触发该函数。</span>\n    <span class="token comment">// 对响应数据做点什么</span>\n    <span class="token keyword">return</span> response<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 超出 2xx 范围的状态码都会触发该函数。</span>\n    <span class="token comment">// 对响应错误做点什么</span>\n    <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="request-api" tabindex="-1"><a class="header-anchor" href="#request-api" aria-hidden="true">#</a> Request Api</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>setOption</td><td>设置全局option</td><td><code>AxiosRequestConfig</code>对象</td><td>-</td></tr><tr><td>setRequest</td><td>设置请求拦截器</td><td><code>(arg0:AxiosRequestConfig)=&gt;AxiosRequestConfig,(arg1)=&gt;any</code></td><td>-</td></tr><tr><td>setResponse</td><td>设置响应拦截器</td><td><code>(arg0:AxiosResponse)=&gt;AxiosResponse,(arg1)=&gt;any</code></td><td>-</td></tr></tbody></table><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Hitokoto</span> <span class="token punctuation">{</span>\n  from<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  hitokoto<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  uuid<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nRequest<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span><span class="token punctuation">{</span> baseURL<span class="token operator">:</span> <span class="token string">&quot;https://v1.hitokoto.cn/&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> error<span class="token punctuation">,</span> loading<span class="token punctuation">,</span> response <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRequest</span><span class="token generic class-name"><span class="token operator">&lt;</span>Hitokoto<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  url<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n  method<span class="token operator">:</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>error</td><td>请求错误 对象</td><td>string</td><td>-</td></tr><tr><td>loading</td><td>请求状态</td><td>boolean</td><td>-</td></tr><tr><td>response</td><td>返回的实体</td><td>any</td><td>-</td></tr><tr><td>Hitokoto</td><td>返回的实体类型(TS)</td><td>泛型</td><td>any</td></tr></tbody></table>',9),h=(0,t.aZ)({setup(n){o.cf.setOption({baseURL:"https://v1.hitokoto.cn"}),o.cf.setRequest((n=>(n.headers.common.token=sessionStorage.token,n)));const{error:s,loading:a,response:h}=(0,o.QT)({url:"/",method:"get"});return(n,o)=>((0,t.wg)(),(0,t.iD)(t.HY,null,[c,(0,t._)("div",null,[l,(0,e.SU)(s)?((0,t.wg)(),(0,t.iD)("div",u,(0,p.zw)((0,e.SU)(s)),1)):(0,e.SU)(a)?((0,t.wg)(),(0,t.iD)("div",i," 请求数据中... "+(0,p.zw)((0,e.SU)(a)),1)):((0,t.wg)(),(0,t.iD)("div",r,[(0,t._)("div",null,(0,p.zw)((0,e.SU)(h).hitokoto)+" - "+(0,p.zw)((0,e.SU)(h).from),1),d,k]))]),b],64))}})}}]);