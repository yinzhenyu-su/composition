"use strict";(self.webpackChunkzcomposition=self.webpackChunkzcomposition||[]).push([[565],{6708:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-c3430952",path:"/composition/Async/useWaitTime/",title:"useWaitTime",lang:"en-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"代码演示",slug:"代码演示",children:[{level:3,title:"基础使用",slug:"基础使用",children:[]},{level:3,title:"示例代码",slug:"示例代码",children:[]}]},{level:2,title:"Option",slug:"option",children:[]}],filePathRelative:"composition/Async/useWaitTime/README.md",git:{updatedTime:1637633566e3,contributors:[{name:"susheng",email:"2771885247@qq.com",commits:1}]}}},7828:(n,s,a)=>{a.r(s),a.d(s,{default:()=>v});var t=a(6252),p=a(3577),e=a(1790),o=a(2262),l=a(9669),c=a.n(l);const u=(0,t.uE)('<h1 id="usewaittime" tabindex="-1"><a class="header-anchor" href="#usewaittime" aria-hidden="true">#</a> useWaitTime</h1><p>异步函数执行后，大于某个时间执行另一个函数</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>常见场景</p><blockquote><p>页面loading：接口请求时间太快，loading状态只显示了一瞬间，使用该函数可以设置一个最小时间，等待满足最小时间后，再关闭loading</p></blockquote></div><h2 id="代码演示" tabindex="-1"><a class="header-anchor" href="#代码演示" aria-hidden="true">#</a> 代码演示</h2><h3 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用" aria-hidden="true">#</a> 基础使用</h3>',5),i=(0,t._)("span",null,"当满足最小执行时间：",-1),k=["value"],r=(0,t._)("span",null,"后，关闭loading",-1),d=(0,t._)("br",null,null,-1),g=(0,t._)("br",null,null,-1),b=(0,t._)("br",null,null,-1),m=(0,t._)("br",null,null,-1),h=(0,t.uE)('<h3 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码" aria-hidden="true">#</a> 示例代码</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useWaitTime <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zcomposition&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&quot;axios&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> loading <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> minTime <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">useWaitTime</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        loading<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;https://v1.hitokoto.cn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        msg<span class="token punctuation">.</span>value <span class="token operator">=</span> data<span class="token punctuation">.</span>hitokoto<span class="token punctuation">;</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;data&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    minTime<span class="token punctuation">.</span>value<span class="token punctuation">,</span>\n    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        loading<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>当满足最小执行时间：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>number<span class="token punctuation">&#39;</span></span> <span class="token attr-name"><span class="token namespace">v-model:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>minTime<span class="token punctuation">&#39;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>后，关闭loading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>当前loading状态：{{ loading }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>接口返回： {{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>handleClick<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>执行函数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="option" tabindex="-1"><a class="header-anchor" href="#option" aria-hidden="true">#</a> Option</h2><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>funAsync</td><td>异步函数</td><td>() =&gt; void</td><td>-</td></tr><tr><td>time</td><td>最小等待时间</td><td>number</td><td>-</td></tr><tr><td>funThen</td><td>满足最小等待时间后执行的函数</td><td>() =&gt; void</td><td>-</td></tr></tbody></table>',5),v=(0,t.aZ)({setup(n){const s=(0,o.iH)(!1),a=(0,o.iH)(1e3),l=(0,o.iH)(""),v=()=>{(0,e.AH)((async()=>{s.value=!0;const{data:n}=await c().get("https://v1.hitokoto.cn");l.value=n.hitokoto,console.log(n,"data")}),a.value,(()=>{s.value=!1}))};return(n,e)=>((0,t.wg)(),(0,t.iD)(t.HY,null,[u,(0,t._)("div",null,[i,(0,t._)("input",{type:"number",value:a.value,onChange:e[0]||(e[0]=n=>{a.value=n.target.value})},null,40,k),r,d,g,(0,t._)("div",null,"当前loading状态："+(0,p.zw)(s.value),1),b,(0,t._)("div",null,"接口返回： "+(0,p.zw)(l.value),1),m,(0,t._)("button",{onClick:v},"执行函数")]),h],64))}})}}]);